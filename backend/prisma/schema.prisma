// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" //env("DATABASE_URL")
}

model Recipe {
  id           Int      @id @default(autoincrement())
  title        String   @unique
  description  String?
  ingredients  String
  instructions String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//model Status {
// id          Int      @id @default(autoincrement())
// title       String   @unique
//description String?
// isDeleted   Boolean
// createdAt   DateTime @default(now())
//updatedAt   DateTime @updatedAt
//}

model Brigade {
  id               Int                @id @default(autoincrement())
  title            String             @unique
  description      String?
  person           Person             @relation(fields: [nameManager], references: [id])
  nameManager      Int
  nunManagement    Int
  isDeleted        Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BrigadeVolunteer BrigadeVolunteer[]
}

model BrigadeVolunteer {
  id          Int       @id @default(autoincrement())
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId Int
  brigade     Brigade   @relation(fields: [brigadeId], references: [id])
  brigadeId   Int
}

model Medic {
  id Int @id @default(autoincrement())
}

model Role {
  id          Int      @id @default(autoincrement())
  description String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean
  Person      Person[]
}

model Person {
  id             Int           @id @default(autoincrement())
  firstName      String
  lastName       String
  identification String        @unique
  email          String        @unique
  phone          String        @unique
  isDeleted      Boolean
  role           Role          @relation(fields: [roleId], references: [id])
  roleId         Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Volunteer      Volunteer[]
  Donor          Donor[]
  Brigade        Brigade[]
  User           User[]
  Beneficiary    Beneficiary[]
}

model TypeDonation {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean

  Donation Donation[]
}

model Donation {
  id             Int             @id @default(autoincrement())
  typeDonation   TypeDonation    @relation(fields: [typeDonationId], references: [id])
  typeDonationId Int
  value          Int?
  isDeleted      Boolean
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  DonationDonor  DonationDonor[]
}

model DonationDonor {
  id         Int      @id @default(autoincrement())
  donor      Donor    @relation(fields: [donorId], references: [id])
  donorId    Int
  donation   Donation @relation(fields: [donationId], references: [id])
  donationId Int
}

model Donor {
  id            Int             @id @default(autoincrement())
  person        Person          @relation(fields: [personId], references: [id])
  personId      Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  DonationDonor DonationDonor[]
}

model Volunteer {
  id               Int                @id @default(autoincrement())
  person           Person             @relation(fields: [personId], references: [id])
  personId         Int
  enable           Boolean
  isDeleted        Boolean
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  BrigadeVolunteer BrigadeVolunteer[]
}

model User {
  id        Int      @id @default(autoincrement())
  person    Person   @relation(fields: [personId], references: [id])
  personId  Int
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TypeHelp {
  id          Int           @id @default(autoincrement())
  title       String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Beneficiary Beneficiary[]
}

model Beneficiary {
  id          Int      @id @default(autoincrement())
  person      Person   @relation(fields: [personId], references: [id])
  personId    Int
  description String
  typeHelp    TypeHelp @relation(fields: [typeHelpId], references: [id])
  typeHelpId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
